{
	"id": 0,
	"name": "stock-location",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 49,
			"name": "FindConfig",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "An object that is used to configure how an entity is retrieved from the database. It accepts as a typed parameter an "
					},
					{
						"kind": "code",
						"text": "`Entity`"
					},
					{
						"kind": "text",
						"text": " class,\nwhich provides correct typing of field names in its properties."
					}
				]
			},
			"children": [
				{
					"id": 50,
					"name": "select",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of strings, each being attribute names of the entity to retrieve in the result."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "string"
								},
								{
									"type": "typeOperator",
									"operator": "keyof",
									"target": {
										"type": "reference",
										"target": 59,
										"name": "Entity",
										"package": "@medusajs/types",
										"qualifiedName": "FindConfig.Entity",
										"refersToTypeParameter": true
									}
								}
							]
						}
					}
				},
				{
					"id": 51,
					"name": "skip",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A number indicating the number of records to skip before retrieving the results."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 52,
					"name": "take",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A number indicating the number of records to return in the result."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 53,
					"name": "relations",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An array of strings, each being relation names of the entity to retrieve in the result."
							}
						]
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 54,
					"name": "order",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An object used to specify how to sort the returned records. Its keys are the names of attributes of the entity, and a key's value can either be "
							},
							{
								"kind": "code",
								"text": "`ASC`"
							},
							{
								"kind": "text",
								"text": "\nto sort retrieved records in an ascending order, or "
							},
							{
								"kind": "code",
								"text": "`DESC`"
							},
							{
								"kind": "text",
								"text": " to sort retrieved records in a descending order."
							}
						]
					},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 55,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"indexSignature": {
								"id": 56,
								"name": "__index",
								"variant": "signature",
								"kind": 8192,
								"flags": {},
								"parameters": [
									{
										"id": 57,
										"name": "K",
										"variant": "param",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "literal",
											"value": "ASC"
										},
										{
											"type": "literal",
											"value": "DESC"
										}
									]
								}
							}
						}
					}
				},
				{
					"id": 58,
					"name": "withDeleted",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A boolean indicating whether deleted records should also be retrieved as part of the result. This only works if the entity extends the\n"
							},
							{
								"kind": "code",
								"text": "`SoftDeletableEntity`"
							},
							{
								"kind": "text",
								"text": " class."
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						50,
						51,
						52,
						53,
						54,
						58
					]
				}
			],
			"typeParameters": [
				{
					"id": 59,
					"name": "Entity",
					"variant": "typeParam",
					"kind": 131072,
					"flags": {}
				}
			]
		},
		{
			"id": 112,
			"name": "StringComparisonOperator",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 113,
					"name": "lt",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 114,
					"name": "gt",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 115,
					"name": "gte",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 116,
					"name": "lte",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 117,
					"name": "contains",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 118,
					"name": "starts_with",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 119,
					"name": "ends_with",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						113,
						114,
						115,
						116,
						117,
						118,
						119
					]
				}
			]
		},
		{
			"id": 166,
			"name": "JoinerRelationship",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 167,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 168,
							"name": "alias",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 169,
							"name": "foreignKey",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 170,
							"name": "primaryKey",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 171,
							"name": "serviceName",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 172,
							"name": "isInternalService",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "If true, the relationship is an internal service from the medusa core\nTODO: Remove when there are no more \"internal\" services"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 173,
							"name": "inverse",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "In an inverted relationship the foreign key is on the other service and the primary key is on the current service"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 174,
							"name": "isList",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Force the relationship to return a list"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 175,
							"name": "args",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Extra arguments to pass to the remoteFetchData callback"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								168,
								169,
								170,
								171,
								172,
								173,
								174,
								175
							]
						}
					]
				}
			}
		},
		{
			"id": 163,
			"name": "JoinerServiceConfigAlias",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 164,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				},
				{
					"id": 165,
					"name": "args",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Extra arguments to pass to the remoteFetchData callback"
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						164,
						165
					]
				}
			]
		},
		{
			"id": 145,
			"name": "JoinerServiceConfig",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 146,
					"name": "serviceName",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 147,
					"name": "alias",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Property name to use as entrypoint to the service"
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"target": 163,
								"name": "JoinerServiceConfigAlias",
								"package": "@medusajs/types"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": 163,
									"name": "JoinerServiceConfigAlias",
									"package": "@medusajs/types"
								}
							}
						]
					}
				},
				{
					"id": 148,
					"name": "fieldAlias",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "alias for deeper nested relationships (e.g. { 'price': 'prices.calculated_price_set.amount' })"
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 149,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 150,
													"name": "path",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 151,
													"name": "forwardArgumentsOnPath",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														150,
														151
													]
												}
											]
										}
									}
								]
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				},
				{
					"id": 152,
					"name": "primaryKeys",
					"variant": "declaration",
					"kind": 1024,
					"flags": {},
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 153,
					"name": "relationships",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"target": 166,
							"name": "JoinerRelationship",
							"package": "@medusajs/types"
						}
					}
				},
				{
					"id": 154,
					"name": "extends",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"type": {
						"type": "array",
						"elementType": {
							"type": "reflection",
							"declaration": {
								"id": 155,
								"name": "__type",
								"variant": "declaration",
								"kind": 65536,
								"flags": {},
								"children": [
									{
										"id": 156,
										"name": "serviceName",
										"variant": "declaration",
										"kind": 1024,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									{
										"id": 157,
										"name": "relationship",
										"variant": "declaration",
										"kind": 1024,
										"flags": {},
										"type": {
											"type": "reference",
											"target": 166,
											"name": "JoinerRelationship",
											"package": "@medusajs/types"
										}
									}
								],
								"groups": [
									{
										"title": "Properties",
										"children": [
											156,
											157
										]
									}
								]
							}
						}
					}
				},
				{
					"id": 158,
					"name": "args",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Extra arguments to pass to the remoteFetchData callback"
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Record"
						},
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Record",
						"package": "typescript"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						146,
						147,
						148,
						152,
						153,
						154,
						158
					]
				}
			]
		},
		{
			"id": 85,
			"name": "ModuleJoinerConfig",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"target": {
							"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
							"qualifiedName": "Omit"
						},
						"typeArguments": [
							{
								"type": "reference",
								"target": 145,
								"name": "JoinerServiceConfig",
								"package": "@medusajs/types"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "serviceName"
									},
									{
										"type": "literal",
										"value": "primaryKeys"
									},
									{
										"type": "literal",
										"value": "relationships"
									},
									{
										"type": "literal",
										"value": "extends"
									}
								]
							}
						],
						"name": "Omit",
						"package": "typescript"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 86,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 87,
									"name": "schema",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "GraphQL schema for the all module's available entities and fields"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 88,
									"name": "relationships",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 159,
											"name": "ModuleJoinerRelationship",
											"package": "@medusajs/types"
										}
									}
								},
								{
									"id": 89,
									"name": "extends",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reflection",
											"declaration": {
												"id": 90,
												"name": "__type",
												"variant": "declaration",
												"kind": 65536,
												"flags": {},
												"children": [
													{
														"id": 91,
														"name": "serviceName",
														"variant": "declaration",
														"kind": 1024,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"id": 92,
														"name": "fieldAlias",
														"variant": "declaration",
														"kind": 1024,
														"flags": {
															"isOptional": true
														},
														"type": {
															"type": "reference",
															"target": {
																"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																"qualifiedName": "Record"
															},
															"typeArguments": [
																{
																	"type": "intrinsic",
																	"name": "string"
																},
																{
																	"type": "union",
																	"types": [
																		{
																			"type": "intrinsic",
																			"name": "string"
																		},
																		{
																			"type": "reflection",
																			"declaration": {
																				"id": 93,
																				"name": "__type",
																				"variant": "declaration",
																				"kind": 65536,
																				"flags": {},
																				"children": [
																					{
																						"id": 94,
																						"name": "path",
																						"variant": "declaration",
																						"kind": 1024,
																						"flags": {},
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					},
																					{
																						"id": 95,
																						"name": "forwardArgumentsOnPath",
																						"variant": "declaration",
																						"kind": 1024,
																						"flags": {},
																						"type": {
																							"type": "array",
																							"elementType": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						}
																					}
																				],
																				"groups": [
																					{
																						"title": "Properties",
																						"children": [
																							94,
																							95
																						]
																					}
																				]
																			}
																		}
																	]
																}
															],
															"name": "Record",
															"package": "typescript"
														}
													},
													{
														"id": 96,
														"name": "relationship",
														"variant": "declaration",
														"kind": 1024,
														"flags": {},
														"type": {
															"type": "reference",
															"target": 159,
															"name": "ModuleJoinerRelationship",
															"package": "@medusajs/types"
														}
													}
												],
												"groups": [
													{
														"title": "Properties",
														"children": [
															91,
															92,
															96
														]
													}
												]
											}
										}
									}
								},
								{
									"id": 97,
									"name": "serviceName",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 98,
									"name": "primaryKeys",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 99,
									"name": "isLink",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If the module is a link module"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 100,
									"name": "linkableKeys",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Keys that can be used to link to other modules. e.g { product_id: \"Product\" } \"Product\" being the entity it refers to"
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 101,
									"name": "isReadOnlyLink",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If true it expands a RemoteQuery property but doesn't create a pivot table"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 102,
									"name": "databaseConfig",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 103,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 104,
													"name": "tableName",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Name of the pivot table. If not provided it is auto generated"
															}
														]
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 105,
													"name": "idPrefix",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "Prefix for the id column. If not provided it is \"link\""
															}
														]
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 106,
													"name": "extraFields",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Record"
														},
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reflection",
																"declaration": {
																	"id": 107,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {},
																	"children": [
																		{
																			"id": 108,
																			"name": "type",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {},
																			"type": {
																				"type": "union",
																				"types": [
																					{
																						"type": "literal",
																						"value": "date"
																					},
																					{
																						"type": "literal",
																						"value": "time"
																					},
																					{
																						"type": "literal",
																						"value": "datetime"
																					},
																					{
																						"type": "literal",
																						"value": "bigint"
																					},
																					{
																						"type": "literal",
																						"value": "blob"
																					},
																					{
																						"type": "literal",
																						"value": "uint8array"
																					},
																					{
																						"type": "literal",
																						"value": "array"
																					},
																					{
																						"type": "literal",
																						"value": "enumArray"
																					},
																					{
																						"type": "literal",
																						"value": "enum"
																					},
																					{
																						"type": "literal",
																						"value": "json"
																					},
																					{
																						"type": "literal",
																						"value": "integer"
																					},
																					{
																						"type": "literal",
																						"value": "smallint"
																					},
																					{
																						"type": "literal",
																						"value": "tinyint"
																					},
																					{
																						"type": "literal",
																						"value": "mediumint"
																					},
																					{
																						"type": "literal",
																						"value": "float"
																					},
																					{
																						"type": "literal",
																						"value": "double"
																					},
																					{
																						"type": "literal",
																						"value": "boolean"
																					},
																					{
																						"type": "literal",
																						"value": "decimal"
																					},
																					{
																						"type": "literal",
																						"value": "string"
																					},
																					{
																						"type": "literal",
																						"value": "uuid"
																					},
																					{
																						"type": "literal",
																						"value": "text"
																					}
																				]
																			}
																		},
																		{
																			"id": 109,
																			"name": "defaultValue",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {
																				"isOptional": true
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 110,
																			"name": "nullable",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {
																				"isOptional": true
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "boolean"
																			}
																		},
																		{
																			"id": 111,
																			"name": "options",
																			"variant": "declaration",
																			"kind": 1024,
																			"flags": {
																				"isOptional": true
																			},
																			"comment": {
																				"summary": [
																					{
																						"kind": "text",
																						"text": "Mikro-orm options for the column"
																					}
																				]
																			},
																			"type": {
																				"type": "reference",
																				"target": {
																					"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																					"qualifiedName": "Record"
																				},
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "string"
																					},
																					{
																						"type": "intrinsic",
																						"name": "unknown"
																					}
																				],
																				"name": "Record",
																				"package": "typescript"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"children": [
																				108,
																				109,
																				110,
																				111
																			]
																		}
																	]
																}
															}
														],
														"name": "Record",
														"package": "typescript"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														104,
														105,
														106
													]
												}
											]
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										87,
										88,
										89,
										97,
										98,
										99,
										100,
										101,
										102
									]
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 159,
			"name": "ModuleJoinerRelationship",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"target": 166,
						"name": "JoinerRelationship",
						"package": "@medusajs/types"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 160,
							"name": "__type",
							"variant": "declaration",
							"kind": 65536,
							"flags": {},
							"children": [
								{
									"id": 161,
									"name": "isInternalService",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If true, the relationship is an internal service from the medusa core TODO: Remove when there are no more \"internal\" services"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 162,
									"name": "deleteCascade",
									"variant": "declaration",
									"kind": 1024,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "If true, the link joiner will cascade deleting the relationship"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										161,
										162
									]
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 37,
			"name": "IModuleService",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"extendedBy": [
				{
					"type": "reference",
					"target": 1,
					"name": "IStockLocationService"
				}
			]
		},
		{
			"id": 70,
			"name": "SharedContext",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [],
				"blockTags": [
					{
						"tag": "@deprecated",
						"content": [
							{
								"kind": "text",
								"text": "use "
							},
							{
								"kind": "code",
								"text": "`Context`"
							},
							{
								"kind": "text",
								"text": " instead\n\n\nA context used to share resources, such as transaction manager, between the application and the module."
							}
						]
					}
				]
			},
			"children": [
				{
					"id": 71,
					"name": "transactionManager",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of a transaction manager."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
							"qualifiedName": "EntityManager"
						},
						"name": "EntityManager",
						"package": "typeorm"
					}
				},
				{
					"id": 72,
					"name": "manager",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "An instance of an entity manager."
							}
						]
					},
					"type": {
						"type": "reference",
						"target": {
							"sourceFileName": "../../../node_modules/typeorm/entity-manager/EntityManager.d.ts",
							"qualifiedName": "EntityManager"
						},
						"name": "EntityManager",
						"package": "typeorm"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						71,
						72
					]
				}
			]
		},
		{
			"id": 120,
			"name": "StockLocationAddressDTO",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Represents a Stock Location Address"
					}
				],
				"modifierTags": [
					"@interface"
				]
			},
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 121,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 122,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The stock location address' ID"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 123,
							"name": "address_1",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stock location address"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 124,
							"name": "address_2",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stock location address' complement"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "literal",
										"value": null
									}
								]
							}
						},
						{
							"id": 125,
							"name": "company",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stock location company' name"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "literal",
										"value": null
									}
								]
							}
						},
						{
							"id": 126,
							"name": "country_code",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stock location address' country"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 127,
							"name": "city",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stock location address' city"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "literal",
										"value": null
									}
								]
							}
						},
						{
							"id": 128,
							"name": "phone",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stock location address' phone number"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "literal",
										"value": null
									}
								]
							}
						},
						{
							"id": 129,
							"name": "postal_code",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stock location address' postal code"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "literal",
										"value": null
									}
								]
							}
						},
						{
							"id": 130,
							"name": "province",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stock location address' province"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "literal",
										"value": null
									}
								]
							}
						},
						{
							"id": 131,
							"name": "metadata",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An optional key-value map with additional details"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									{
										"type": "literal",
										"value": null
									}
								]
							}
						},
						{
							"id": 132,
							"name": "created_at",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The date with timezone at which the resource was created."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Date"
										},
										"name": "Date",
										"package": "typescript"
									}
								]
							}
						},
						{
							"id": 133,
							"name": "updated_at",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The date with timezone at which the resource was updated."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Date"
										},
										"name": "Date",
										"package": "typescript"
									}
								]
							}
						},
						{
							"id": 134,
							"name": "deleted_at",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The date with timezone at which the resource was deleted."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Date"
										},
										"name": "Date",
										"package": "typescript"
									},
									{
										"type": "literal",
										"value": null
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								122,
								123,
								124,
								125,
								126,
								127,
								128,
								129,
								130,
								131,
								132,
								133,
								134
							]
						}
					]
				}
			}
		},
		{
			"id": 60,
			"name": "StockLocationDTO",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Represents a Stock Location"
					}
				],
				"modifierTags": [
					"@interface"
				]
			},
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 61,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 62,
							"name": "id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The stock location's ID"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 63,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The name of the stock location"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 64,
							"name": "metadata",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An optional key-value map with additional details"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									},
									{
										"type": "literal",
										"value": null
									}
								]
							}
						},
						{
							"id": 65,
							"name": "address_id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stock location address' ID"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 66,
							"name": "address",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The Address of the Stock Location"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 120,
								"name": "StockLocationAddressDTO",
								"package": "@medusajs/types"
							}
						},
						{
							"id": 67,
							"name": "created_at",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The date with timezone at which the resource was created."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Date"
										},
										"name": "Date",
										"package": "typescript"
									}
								]
							}
						},
						{
							"id": 68,
							"name": "updated_at",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The date with timezone at which the resource was updated."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Date"
										},
										"name": "Date",
										"package": "typescript"
									}
								]
							}
						},
						{
							"id": 69,
							"name": "deleted_at",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The date with timezone at which the resource was deleted."
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Date"
										},
										"name": "Date",
										"package": "typescript"
									},
									{
										"type": "literal",
										"value": null
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								62,
								63,
								64,
								65,
								66,
								67,
								68,
								69
							]
						}
					]
				}
			}
		},
		{
			"id": 45,
			"name": "FilterableStockLocationProps",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "The filters to apply on the retrieved stock locations."
					}
				]
			},
			"children": [
				{
					"id": 46,
					"name": "q",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Search parameter for stock location names"
							}
						]
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 47,
					"name": "id",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The IDs to filter stock locations by."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						]
					}
				},
				{
					"id": 48,
					"name": "name",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The names to filter stock locations by."
							}
						]
					},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							{
								"type": "reference",
								"target": 112,
								"name": "StringComparisonOperator",
								"package": "@medusajs/types"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						46,
						47,
						48
					]
				}
			]
		},
		{
			"id": 135,
			"name": "StockLocationAddressInput",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Represents a Stock Location Address Input"
					}
				],
				"modifierTags": [
					"@interface"
				]
			},
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 136,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 137,
							"name": "address_1",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stock location address"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 138,
							"name": "address_2",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stock location address' complement"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 139,
							"name": "country_code",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stock location address' country"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 140,
							"name": "city",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stock location address' city"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 141,
							"name": "phone",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stock location address' phone number"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 142,
							"name": "province",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stock location address' province"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 143,
							"name": "postal_code",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stock location address' postal code"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 144,
							"name": "metadata",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An optional key-value map with additional details"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								137,
								138,
								139,
								140,
								141,
								142,
								143,
								144
							]
						}
					]
				}
			}
		},
		{
			"id": 73,
			"name": "CreateStockLocationInput",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Represents the Input to create a Stock Location"
					}
				],
				"modifierTags": [
					"@interface"
				]
			},
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 74,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 75,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The stock location name"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 76,
							"name": "address_id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The Stock location address ID"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 77,
							"name": "address",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stock location address object"
									}
								]
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"target": 135,
										"name": "StockLocationAddressInput",
										"package": "@medusajs/types"
									}
								]
							}
						},
						{
							"id": 78,
							"name": "metadata",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An optional key-value map with additional details"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								75,
								76,
								77,
								78
							]
						}
					]
				}
			}
		},
		{
			"id": 79,
			"name": "UpdateStockLocationInput",
			"variant": "declaration",
			"kind": 2097152,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "Represents the Input to update a Stock Location"
					}
				],
				"modifierTags": [
					"@interface"
				]
			},
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 80,
					"name": "__type",
					"variant": "declaration",
					"kind": 65536,
					"flags": {},
					"children": [
						{
							"id": 81,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The stock location name"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 82,
							"name": "address_id",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The Stock location address ID"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 83,
							"name": "address",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Stock location address object"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 135,
								"name": "StockLocationAddressInput",
								"package": "@medusajs/types"
							}
						},
						{
							"id": 84,
							"name": "metadata",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "An optional key-value map with additional details"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Record"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "unknown"
									}
								],
								"name": "Record",
								"package": "typescript"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								81,
								82,
								83,
								84
							]
						}
					]
				}
			}
		},
		{
			"id": 1,
			"name": "IStockLocationService",
			"variant": "declaration",
			"kind": 256,
			"flags": {},
			"children": [
				{
					"id": 2,
					"name": "list",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 3,
							"name": "list",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of stock locations based on optional filters and configuration."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of stock locations."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of stock locations using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeStockLocationModule,\n} from \"@medusajs/stock-location\"\n\nasync function listStockLocations (ids: string[]) {\n  const stockLocationModule = await initializeStockLocationModule({})\n\n  const stockLocations = await stockLocationModule.list({\n    id: ids\n  })\n\n  // do something with the stock locations or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the stock locations:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeStockLocationModule,\n} from \"@medusajs/stock-location\"\n\nasync function listStockLocations (ids: string[]) {\n  const stockLocationModule = await initializeStockLocationModule({})\n\n  const stockLocations = await stockLocationModule.list({\n    id: ids\n  }, {\n    relations: [\"address\"]\n  })\n\n  // do something with the stock locations or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeStockLocationModule,\n} from \"@medusajs/stock-location\"\n\nasync function listStockLocations (ids: string[], skip: number, take: number) {\n  const stockLocationModule = await initializeStockLocationModule({})\n\n  const stockLocations = await stockLocationModule.list({\n    id: ids\n  }, {\n    relations: [\"address\"],\n    skip,\n    take\n  })\n\n  // do something with the stock locations or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 4,
									"name": "selector",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the retrieved stock locations."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 45,
										"name": "FilterableStockLocationProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 5,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the stock locations are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a stock location."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 49,
										"typeArguments": [
											{
												"type": "reference",
												"target": 60,
												"name": "StockLocationDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 6,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 70,
										"name": "SharedContext",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": 60,
											"name": "StockLocationDTO",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 7,
					"name": "listAndCount",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 8,
							"name": "listAndCount",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a paginated list of stock locations along with the total count of available stock locations satisfying the provided filters."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of stock locations along with the total count."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "To retrieve a list of stock locations using their IDs:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeStockLocationModule,\n} from \"@medusajs/stock-location\"\n\nasync function listStockLocations (ids: string[]) {\n  const stockLocationModule = await initializeStockLocationModule({})\n\n  const [stockLocations, count] = await stockLocationModule.listAndCount({\n    id: ids\n  })\n\n  // do something with the stock locations or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved within the stock locations:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeStockLocationModule,\n} from \"@medusajs/stock-location\"\n\nasync function listStockLocations (ids: string[]) {\n  const stockLocationModule = await initializeStockLocationModule({})\n\n  const [stockLocations, count] = await stockLocationModule.listAndCount({\n    id: ids\n  }, {\n    relations: [\"address\"]\n  })\n\n  // do something with the stock locations or return them\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nBy default, only the first "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " records are retrieved. You can control pagination by specifying the "
											},
											{
												"kind": "code",
												"text": "`skip`"
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "code",
												"text": "`take`"
											},
											{
												"kind": "text",
												"text": " properties of the "
											},
											{
												"kind": "code",
												"text": "`config`"
											},
											{
												"kind": "text",
												"text": " parameter:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeStockLocationModule,\n} from \"@medusajs/stock-location\"\n\nasync function listStockLocations (ids: string[], skip: number, take: number) {\n  const stockLocationModule = await initializeStockLocationModule({})\n\n  const [stockLocations, count] = await stockLocationModule.listAndCount({\n    id: ids\n  }, {\n    relations: [\"address\"],\n    skip,\n    take\n  })\n\n  // do something with the stock locations or return them\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 9,
									"name": "selector",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The filters to apply on the retrieved stock locations."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 45,
										"name": "FilterableStockLocationProps",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 10,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the stock locations are retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a stock location."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 49,
										"typeArguments": [
											{
												"type": "reference",
												"target": 60,
												"name": "StockLocationDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 11,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 70,
										"name": "SharedContext",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "tuple",
										"elements": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": 60,
													"name": "StockLocationDTO",
													"package": "@medusajs/types"
												}
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 12,
					"name": "retrieve",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 13,
							"name": "retrieve",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to retrieve a stock location by its ID"
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The stock location's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "A simple example that retrieves a inventory item by its ID:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeStockLocationModule,\n} from \"@medusajs/stock-location\"\n\nasync function retrieveStockLocation (id: string) {\n  const stockLocationModule = await initializeStockLocationModule({})\n\n  const stockLocation = await stockLocationModule.retrieve(id)\n\n  // do something with the stock location or return it\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo specify relations that should be retrieved:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeStockLocationModule,\n} from \"@medusajs/stock-location\"\n\nasync function retrieveStockLocation (id: string) {\n  const stockLocationModule = await initializeStockLocationModule({})\n\n  const stockLocation = await stockLocationModule.retrieve(id, {\n    relations: [\"address\"]\n  })\n\n  // do something with the stock location or return it\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 14,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the stock location"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 15,
									"name": "config",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The configurations determining how the stock location is retrieved. Its properties, such as "
											},
											{
												"kind": "code",
												"text": "`select`"
											},
											{
												"kind": "text",
												"text": " or "
											},
											{
												"kind": "code",
												"text": "`relations`"
											},
											{
												"kind": "text",
												"text": ", accept the\nattributes or relations associated with a stock location."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 49,
										"typeArguments": [
											{
												"type": "reference",
												"target": 60,
												"name": "StockLocationDTO",
												"package": "@medusajs/types"
											}
										],
										"name": "FindConfig",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 16,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 70,
										"name": "SharedContext",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 60,
										"name": "StockLocationDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 17,
					"name": "create",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 18,
							"name": "create",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to create a stock location."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The created stock location's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeStockLocationModule,\n} from \"@medusajs/stock-location\"\n\nasync function createStockLocation (name: string) {\n  const stockLocationModule = await initializeStockLocationModule({})\n\n  const stockLocation = await stockLocationModule.create({\n    name\n  })\n\n  // do something with the stock location or return it\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 19,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the stock location to create."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 73,
										"name": "CreateStockLocationInput",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 20,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 70,
										"name": "SharedContext",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 60,
										"name": "StockLocationDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 21,
					"name": "update",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 22,
							"name": "update",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to update a stock location."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The stock location's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeStockLocationModule,\n} from \"@medusajs/stock-location\"\n\nasync function updateStockLocation (id:string, name: string) {\n  const stockLocationModule = await initializeStockLocationModule({})\n\n  const stockLocation = await stockLocationModule.update(id, {\n    name\n  })\n\n  // do something with the stock location or return it\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 23,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the stock location."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 24,
									"name": "input",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The attributes to update in the stock location."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 79,
										"name": "UpdateStockLocationInput",
										"package": "@medusajs/types"
									}
								},
								{
									"id": 25,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 70,
										"name": "SharedContext",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 60,
										"name": "StockLocationDTO",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				},
				{
					"id": 26,
					"name": "delete",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 27,
							"name": "delete",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used to delete a stock location."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the stock location is successfully deleted."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport {\n  initialize as initializeStockLocationModule,\n} from \"@medusajs/stock-location\"\n\nasync function deleteStockLocation (id:string) {\n  const stockLocationModule = await initializeStockLocationModule({})\n\n  await stockLocationModule.delete(id)\n}\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 28,
									"name": "id",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The ID of the stock location."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 29,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A context used to share resources, such as transaction manager, between the application and the module."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 70,
										"name": "SharedContext",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						2,
						7,
						12,
						17,
						21,
						26
					]
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"target": 37,
					"name": "IModuleService",
					"package": "@medusajs/types"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Interfaces",
			"children": [
				49,
				112,
				163,
				145,
				37,
				70,
				45,
				1
			]
		},
		{
			"title": "Type Aliases",
			"children": [
				166,
				85,
				159,
				120,
				60,
				135,
				73,
				79
			]
		}
	],
	"packageName": "@medusajs/types",
	"symbolIdMap": {
		"0": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": ""
		},
		"1": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "IStockLocationService"
		},
		"2": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "IStockLocationService.list"
		},
		"3": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "IStockLocationService.list"
		},
		"4": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "selector"
		},
		"5": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "config"
		},
		"6": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "context"
		},
		"7": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "IStockLocationService.listAndCount"
		},
		"8": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "IStockLocationService.listAndCount"
		},
		"9": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "selector"
		},
		"10": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "config"
		},
		"11": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "context"
		},
		"12": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "IStockLocationService.retrieve"
		},
		"13": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "IStockLocationService.retrieve"
		},
		"14": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "id"
		},
		"15": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "config"
		},
		"16": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "context"
		},
		"17": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "IStockLocationService.create"
		},
		"18": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "IStockLocationService.create"
		},
		"19": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "input"
		},
		"20": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "context"
		},
		"21": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "IStockLocationService.update"
		},
		"22": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "IStockLocationService.update"
		},
		"23": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "id"
		},
		"24": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "input"
		},
		"25": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "context"
		},
		"26": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "IStockLocationService.delete"
		},
		"27": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "IStockLocationService.delete"
		},
		"28": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "id"
		},
		"29": {
			"sourceFileName": "../../../packages/types/src/stock-location/service.ts",
			"qualifiedName": "context"
		},
		"37": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "IModuleService"
		},
		"45": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "FilterableStockLocationProps"
		},
		"46": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.q"
		},
		"47": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.id"
		},
		"48": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.name"
		},
		"49": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig"
		},
		"50": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.select"
		},
		"51": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.skip"
		},
		"52": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.take"
		},
		"53": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.relations"
		},
		"54": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.order"
		},
		"55": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "__type"
		},
		"56": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "__type.__index"
		},
		"58": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.withDeleted"
		},
		"59": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "FindConfig.Entity"
		},
		"60": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "StockLocationDTO"
		},
		"61": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type"
		},
		"62": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.id"
		},
		"63": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.name"
		},
		"64": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.metadata"
		},
		"65": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.address_id"
		},
		"66": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.address"
		},
		"67": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.created_at"
		},
		"68": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.updated_at"
		},
		"69": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.deleted_at"
		},
		"70": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "SharedContext"
		},
		"71": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "__type.transactionManager"
		},
		"72": {
			"sourceFileName": "../../../packages/types/src/shared-context.ts",
			"qualifiedName": "__type.manager"
		},
		"73": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "CreateStockLocationInput"
		},
		"74": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type"
		},
		"75": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.name"
		},
		"76": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.address_id"
		},
		"77": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.address"
		},
		"78": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.metadata"
		},
		"79": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "UpdateStockLocationInput"
		},
		"80": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type"
		},
		"81": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.name"
		},
		"82": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.address_id"
		},
		"83": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.address"
		},
		"84": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.metadata"
		},
		"85": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "ModuleJoinerConfig"
		},
		"86": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type"
		},
		"87": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.schema"
		},
		"88": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.relationships"
		},
		"89": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.extends"
		},
		"90": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type"
		},
		"91": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.serviceName"
		},
		"92": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.fieldAlias"
		},
		"93": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type"
		},
		"94": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.path"
		},
		"95": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.forwardArgumentsOnPath"
		},
		"96": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.relationship"
		},
		"97": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.serviceName"
		},
		"98": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.primaryKeys"
		},
		"99": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.isLink"
		},
		"100": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.linkableKeys"
		},
		"101": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.isReadOnlyLink"
		},
		"102": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.databaseConfig"
		},
		"103": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type"
		},
		"104": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.tableName"
		},
		"105": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.idPrefix"
		},
		"106": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.extraFields"
		},
		"107": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type"
		},
		"108": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.type"
		},
		"109": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.defaultValue"
		},
		"110": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.nullable"
		},
		"111": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.options"
		},
		"112": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "StringComparisonOperator"
		},
		"113": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "StringComparisonOperator.lt"
		},
		"114": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "StringComparisonOperator.gt"
		},
		"115": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "StringComparisonOperator.gte"
		},
		"116": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "StringComparisonOperator.lte"
		},
		"117": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "StringComparisonOperator.contains"
		},
		"118": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "StringComparisonOperator.starts_with"
		},
		"119": {
			"sourceFileName": "../../../packages/types/src/common/common.ts",
			"qualifiedName": "StringComparisonOperator.ends_with"
		},
		"120": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "StockLocationAddressDTO"
		},
		"121": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type"
		},
		"122": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.id"
		},
		"123": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.address_1"
		},
		"124": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.address_2"
		},
		"125": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.company"
		},
		"126": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.country_code"
		},
		"127": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.city"
		},
		"128": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.phone"
		},
		"129": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.postal_code"
		},
		"130": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.province"
		},
		"131": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.metadata"
		},
		"132": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.created_at"
		},
		"133": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.updated_at"
		},
		"134": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.deleted_at"
		},
		"135": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "StockLocationAddressInput"
		},
		"136": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type"
		},
		"137": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.address_1"
		},
		"138": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.address_2"
		},
		"139": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.country_code"
		},
		"140": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.city"
		},
		"141": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.phone"
		},
		"142": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.province"
		},
		"143": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.postal_code"
		},
		"144": {
			"sourceFileName": "../../../packages/types/src/stock-location/common.ts",
			"qualifiedName": "__type.metadata"
		},
		"145": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig"
		},
		"146": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.serviceName"
		},
		"147": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.alias"
		},
		"148": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.fieldAlias"
		},
		"149": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type"
		},
		"150": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.path"
		},
		"151": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.forwardArgumentsOnPath"
		},
		"152": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.primaryKeys"
		},
		"153": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.relationships"
		},
		"154": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.extends"
		},
		"155": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type"
		},
		"156": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.serviceName"
		},
		"157": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.relationship"
		},
		"158": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfig.args"
		},
		"159": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "ModuleJoinerRelationship"
		},
		"160": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type"
		},
		"161": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.isInternalService"
		},
		"162": {
			"sourceFileName": "../../../packages/types/src/modules-sdk/index.ts",
			"qualifiedName": "__type.deleteCascade"
		},
		"163": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfigAlias"
		},
		"164": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfigAlias.name"
		},
		"165": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerServiceConfigAlias.args"
		},
		"166": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "JoinerRelationship"
		},
		"167": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type"
		},
		"168": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.alias"
		},
		"169": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.foreignKey"
		},
		"170": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.primaryKey"
		},
		"171": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.serviceName"
		},
		"172": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.isInternalService"
		},
		"173": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.inverse"
		},
		"174": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.isList"
		},
		"175": {
			"sourceFileName": "../../../packages/types/src/joiner/index.ts",
			"qualifiedName": "__type.args"
		}
	}
}